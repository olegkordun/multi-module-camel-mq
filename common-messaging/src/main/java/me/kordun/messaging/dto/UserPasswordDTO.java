package me.kordun.messaging.dto;

import org.joda.beans.BeanDefinition;
import org.joda.beans.ImmutableBean;
import org.joda.beans.PropertyDefinition;

import java.io.Serializable;
import java.util.UUID;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import org.joda.beans.Bean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
@BeanDefinition
public class UserPasswordDTO implements ImmutableBean, Serializable {
    @PropertyDefinition
    private final Long id;
    @PropertyDefinition
    private final String passwordDigest;
    //------------------------- AUTOGENERATED START -------------------------
    ///CLOVER:OFF
    /**
     * The meta-bean for {@code UserPasswordDTO}.
     * @return the meta-bean, not null
     */
    public static UserPasswordDTO.Meta meta() {
        return UserPasswordDTO.Meta.INSTANCE;
    }

    static {
        JodaBeanUtils.registerMetaBean(UserPasswordDTO.Meta.INSTANCE);
    }

    /**
     * The serialization version id.
     */
    private static final long serialVersionUID = 1L;

    /**
     * Returns a builder used to create an instance of the bean.
     * @return the builder, not null
     */
    public static UserPasswordDTO.Builder builder() {
        return new UserPasswordDTO.Builder();
    }

    /**
     * Restricted constructor.
     * @param builder  the builder to copy from, not null
     */
    protected UserPasswordDTO(UserPasswordDTO.Builder builder) {
        this.id = builder.id;
        this.passwordDigest = builder.passwordDigest;
    }

    @Override
    public UserPasswordDTO.Meta metaBean() {
        return UserPasswordDTO.Meta.INSTANCE;
    }

    @Override
    public <R> Property<R> property(String propertyName) {
        return metaBean().<R>metaProperty(propertyName).createProperty(this);
    }

    @Override
    public Set<String> propertyNames() {
        return metaBean().metaPropertyMap().keySet();
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the id.
     * @return the value of the property
     */
    public Long getId() {
        return id;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the passwordDigest.
     * @return the value of the property
     */
    public String getPasswordDigest() {
        return passwordDigest;
    }

    //-----------------------------------------------------------------------
    /**
     * Returns a builder that allows this bean to be mutated.
     * @return the mutable builder, not null
     */
    public Builder toBuilder() {
        return new Builder(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            UserPasswordDTO other = (UserPasswordDTO) obj;
            return JodaBeanUtils.equal(getId(), other.getId()) &&
                    JodaBeanUtils.equal(getPasswordDigest(), other.getPasswordDigest());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getId());
        hash = hash * 31 + JodaBeanUtils.hashCode(getPasswordDigest());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(96);
        buf.append("UserPasswordDTO{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("id").append('=').append(JodaBeanUtils.toString(getId())).append(',').append(' ');
        buf.append("passwordDigest").append('=').append(JodaBeanUtils.toString(getPasswordDigest())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code UserPasswordDTO}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code id} property.
         */
        private final MetaProperty<Long> id = DirectMetaProperty.ofImmutable(
                this, "id", UserPasswordDTO.class, Long.class);
        /**
         * The meta-property for the {@code passwordDigest} property.
         */
        private final MetaProperty<String> passwordDigest = DirectMetaProperty.ofImmutable(
                this, "passwordDigest", UserPasswordDTO.class, String.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "id",
                "passwordDigest");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    return id;
                case -969038785:  // passwordDigest
                    return passwordDigest;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public UserPasswordDTO.Builder builder() {
            return new UserPasswordDTO.Builder();
        }

        @Override
        public Class<? extends UserPasswordDTO> beanType() {
            return UserPasswordDTO.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code id} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<Long> id() {
            return id;
        }

        /**
         * The meta-property for the {@code passwordDigest} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> passwordDigest() {
            return passwordDigest;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    return ((UserPasswordDTO) bean).getId();
                case -969038785:  // passwordDigest
                    return ((UserPasswordDTO) bean).getPasswordDigest();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            metaProperty(propertyName);
            if (quiet) {
                return;
            }
            throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
        }

    }

    //-----------------------------------------------------------------------
    /**
     * The bean-builder for {@code UserPasswordDTO}.
     */
    public static class Builder extends DirectFieldsBeanBuilder<UserPasswordDTO> {

        private Long id;
        private String passwordDigest;

        /**
         * Restricted constructor.
         */
        protected Builder() {
        }

        /**
         * Restricted copy constructor.
         * @param beanToCopy  the bean to copy from, not null
         */
        protected Builder(UserPasswordDTO beanToCopy) {
            this.id = beanToCopy.getId();
            this.passwordDigest = beanToCopy.getPasswordDigest();
        }

        //-----------------------------------------------------------------------
        @Override
        public Object get(String propertyName) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    return id;
                case -969038785:  // passwordDigest
                    return passwordDigest;
                default:
                    throw new NoSuchElementException("Unknown property: " + propertyName);
            }
        }

        @Override
        public Builder set(String propertyName, Object newValue) {
            switch (propertyName.hashCode()) {
                case 3355:  // id
                    this.id = (Long) newValue;
                    break;
                case -969038785:  // passwordDigest
                    this.passwordDigest = (String) newValue;
                    break;
                default:
                    throw new NoSuchElementException("Unknown property: " + propertyName);
            }
            return this;
        }

        @Override
        public Builder set(MetaProperty<?> property, Object value) {
            super.set(property, value);
            return this;
        }

        @Override
        public Builder setString(String propertyName, String value) {
            setString(meta().metaProperty(propertyName), value);
            return this;
        }

        @Override
        public Builder setString(MetaProperty<?> property, String value) {
            super.setString(property, value);
            return this;
        }

        @Override
        public Builder setAll(Map<String, ? extends Object> propertyValueMap) {
            super.setAll(propertyValueMap);
            return this;
        }

        @Override
        public UserPasswordDTO build() {
            return new UserPasswordDTO(this);
        }

        //-----------------------------------------------------------------------
        /**
         * Sets the {@code id} property in the builder.
         * @param id  the new value
         * @return this, for chaining, not null
         */
        public Builder id(Long id) {
            this.id = id;
            return this;
        }

        /**
         * Sets the {@code passwordDigest} property in the builder.
         * @param passwordDigest  the new value
         * @return this, for chaining, not null
         */
        public Builder passwordDigest(String passwordDigest) {
            this.passwordDigest = passwordDigest;
            return this;
        }

        //-----------------------------------------------------------------------
        @Override
        public String toString() {
            StringBuilder buf = new StringBuilder(96);
            buf.append("UserPasswordDTO.Builder{");
            int len = buf.length();
            toString(buf);
            if (buf.length() > len) {
                buf.setLength(buf.length() - 2);
            }
            buf.append('}');
            return buf.toString();
        }

        protected void toString(StringBuilder buf) {
            buf.append("id").append('=').append(JodaBeanUtils.toString(id)).append(',').append(' ');
            buf.append("passwordDigest").append('=').append(JodaBeanUtils.toString(passwordDigest)).append(',').append(' ');
        }

    }

    ///CLOVER:ON
    //-------------------------- AUTOGENERATED END --------------------------
}
